{"ast":null,"code":"var _jsxFileName = \"D:\\\\ProgrammingStuff\\\\GitRepos\\\\RoadToReactDev\\\\react-interview-code\\\\react-interview-start\\\\src\\\\LoginForm.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { login } from \"./utils\";\nimport \"./styles.css\"; // ================ LOGIN FORM ====================\n// \n// Guidelines:\n// * You have an incomplete login form.\n// * You are not allowed to add any additional HTML elements.\n// * You are not allowed to use refs.\n//\n// Tasks:\n//  * The login button should trigger the login() action imported above and pass required data to it.\n//  * Disable the Login button if email is blank OR if password is under 6 letters\n//  * Disable the Login button while login action is being performed\n//  * Show an error message from the login() if login fails. The error should be cleared every time user re-attempts to log in.\n//  * Show an alert box (native Javascript alert) if login succeeds. Investigate the login function to find out how to log in successfully.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function LoginForm() {\n  _s();\n\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: \"Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"email\",\n        type: \"email\",\n        onChange: e => setEmail(e.currentTarget.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"password\",\n        children: \"Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"password\",\n        type: \"password\",\n        onChange: e => setPassword(e.currentTarget.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"errorMessage\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n}\n\n_s(LoginForm, \"3B3pqDcVnkT+z/sPK6Z9zQsLP+s=\");\n\n_c = LoginForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginForm\");","map":{"version":3,"sources":["D:/ProgrammingStuff/GitRepos/RoadToReactDev/react-interview-code/react-interview-start/src/LoginForm.js"],"names":["useState","login","LoginForm","email","setEmail","password","setPassword","e","currentTarget","value"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,KAAT,QAAsB,SAAtB;AACA,OAAO,cAAP,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAe,SAASC,SAAT,GAAqB;AAAA;;AAClC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACK,QAAD,EAAWC,WAAX,IAA0BN,QAAQ,CAAC,EAAD,CAAxC;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,8BACE;AAAO,QAAA,OAAO,EAAE,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAO,QAAA,EAAE,EAAE,OAAX;AAAoB,QAAA,IAAI,EAAE,OAA1B;AAAoC,QAAA,QAAQ,EAAIO,CAAD,IAAOH,QAAQ,CAACG,CAAC,CAACC,aAAF,CAAgBC,KAAjB;AAA9D;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAKE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,8BACE;AAAO,QAAA,OAAO,EAAE,UAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAO,QAAA,EAAE,EAAE,UAAX;AAAuB,QAAA,IAAI,EAAE,UAA7B;AAA0C,QAAA,QAAQ,EAAIF,CAAD,IAAOD,WAAW,CAACC,CAAC,CAACC,aAAF,CAAgBC,KAAjB;AAAvE;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YALF,eAWE;AAAK,MAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,YAXF,eAaE;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA,6BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAbF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD;;GAvBuBP,S;;KAAAA,S","sourcesContent":["import { useState } from 'react'\nimport { login } from \"./utils\";\nimport \"./styles.css\";\n\n// ================ LOGIN FORM ====================\n// \n// Guidelines:\n// * You have an incomplete login form.\n// * You are not allowed to add any additional HTML elements.\n// * You are not allowed to use refs.\n//\n// Tasks:\n//  * The login button should trigger the login() action imported above and pass required data to it.\n//  * Disable the Login button if email is blank OR if password is under 6 letters\n//  * Disable the Login button while login action is being performed\n//  * Show an error message from the login() if login fails. The error should be cleared every time user re-attempts to log in.\n//  * Show an alert box (native Javascript alert) if login succeeds. Investigate the login function to find out how to log in successfully.\n\nexport default function LoginForm() {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n \n  return (\n    <div className=\"wrapper\">\n      <div className=\"row\">\n        <label htmlFor={\"email\"}>Email</label>\n        <input id={\"email\"} type={\"email\"}  onChange={ (e) => setEmail(e.currentTarget.value)}/>\n      </div>\n      <div className=\"row\">\n        <label htmlFor={\"password\"}>Password</label>\n        <input id={\"password\"} type={\"password\"}  onChange={ (e) => setPassword(e.currentTarget.value)}/>\n      </div>\n\n      {/* Place login error inside this div. Show the div ONLY if there are login errors. */}\n      <div className=\"errorMessage\"></div>\n\n      <div className=\"button\">\n        <button>Login</button>\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}