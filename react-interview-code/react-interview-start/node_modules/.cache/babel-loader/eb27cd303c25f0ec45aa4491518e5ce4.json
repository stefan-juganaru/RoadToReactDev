{"ast":null,"code":"var _jsxFileName = \"D:\\\\ProgrammingStuff\\\\GitRepos\\\\RoadToReactDev\\\\react-interview-code\\\\react-interview-start\\\\src\\\\LoginForm.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { login } from \"./utils\";\nimport \"./styles.css\"; // ================ LOGIN FORM ====================\n// \n// Guidelines:\n// * You have an incomplete login form.\n// * You are not allowed to add any additional HTML elements.\n// * You are not allowed to use refs.\n//\n// Tasks:\n//  * The login button should trigger the login() action imported above and pass required data to it.\n//  * Disable the Login button if email is blank OR if password is under 6 letters\n//  * Disable the Login button while login action is being performed\n//  * Show an error message from the login() if login fails. The error should be cleared every time user re-attempts to log in.\n//  * Show an alert box (native Javascript alert) if login succeeds. Investigate the login function to find out how to log in successfully.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function LoginForm() {\n  _s();\n\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [disabled, setDisabled] = useState(false);\n  const [error, setError] = useState(\"\");\n  useEffect(() => {\n    setDisabled(email.length === 0 || password.length < 6);\n  }, [email, password]);\n\n  const loginHandler = async () => {\n    setError(null);\n\n    try {\n      await login(email, password);\n      alert(\"Login successful!\");\n    } catch (e) {\n      setError(e);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: \"Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"email\",\n        type: \"email\",\n        onChange: e => setEmail(e.currentTarget.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"password\",\n        children: \"Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"password\",\n        type: \"password\",\n        onChange: e => setPassword(e.currentTarget.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this),\n    /* Place login error inside this div. Show the div ONLY if there are login errors. */\n    error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"errorMessage\",\n      children: {\n        error\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: loginHandler,\n        disabled: disabled,\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n\n_s(LoginForm, \"+jlrKtw+ngIIlDX1v9FH7FPYiHY=\");\n\n_c = LoginForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginForm\");","map":{"version":3,"sources":["D:/ProgrammingStuff/GitRepos/RoadToReactDev/react-interview-code/react-interview-start/src/LoginForm.js"],"names":["useState","useEffect","login","LoginForm","email","setEmail","password","setPassword","disabled","setDisabled","error","setError","length","loginHandler","alert","e","currentTarget","value"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,KAAT,QAAsB,SAAtB;AACA,OAAO,cAAP,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAe,SAASC,SAAT,GAAqB;AAAA;;AAClC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACM,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACQ,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACU,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,EAAD,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,WAAW,CAACL,KAAK,CAACQ,MAAN,KAAiB,CAAjB,IAAsBN,QAAQ,CAACM,MAAT,GAAkB,CAAzC,CAAX;AACD,GAFQ,EAEN,CAACR,KAAD,EAAQE,QAAR,CAFM,CAAT;;AAIA,QAAMO,YAAY,GAAG,YAAY;AAC/BF,IAAAA,QAAQ,CAAC,IAAD,CAAR;;AACA,QAAI;AACF,YAAMT,KAAK,CAACE,KAAD,EAAQE,QAAR,CAAX;AACAQ,MAAAA,KAAK,CAAC,mBAAD,CAAL;AACD,KAHD,CAGE,OAAOC,CAAP,EAAU;AACVJ,MAAAA,QAAQ,CAACI,CAAD,CAAR;AACD;AACF,GARD;;AASA,sBACE;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,8BACE;AAAO,QAAA,OAAO,EAAE,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAO,QAAA,EAAE,EAAE,OAAX;AAAoB,QAAA,IAAI,EAAE,OAA1B;AAAoC,QAAA,QAAQ,EAAIA,CAAD,IAAOV,QAAQ,CAACU,CAAC,CAACC,aAAF,CAAgBC,KAAjB;AAA9D;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAKE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,8BACE;AAAO,QAAA,OAAO,EAAE,UAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAO,QAAA,EAAE,EAAE,UAAX;AAAuB,QAAA,IAAI,EAAE,UAA7B;AAA0C,QAAA,QAAQ,EAAIF,CAAD,IAAOR,WAAW,CAACQ,CAAC,CAACC,aAAF,CAAgBC,KAAjB;AAAvE;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YALF;AAUG;AACDP,IAAAA,KAAK,iBACL;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,gBACE;AAACA,QAAAA;AAAD;AADF;AAAA;AAAA;AAAA;AAAA,YAZF,eAiBE;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA,6BACE;AAAQ,QAAA,OAAO,EAAEG,YAAjB;AAA+B,QAAA,QAAQ,EAAEL,QAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAjBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAuBD;;GA1CuBL,S;;KAAAA,S","sourcesContent":["import { useState, useEffect } from 'react'\nimport { login } from \"./utils\";\nimport \"./styles.css\";\n\n// ================ LOGIN FORM ====================\n// \n// Guidelines:\n// * You have an incomplete login form.\n// * You are not allowed to add any additional HTML elements.\n// * You are not allowed to use refs.\n//\n// Tasks:\n//  * The login button should trigger the login() action imported above and pass required data to it.\n//  * Disable the Login button if email is blank OR if password is under 6 letters\n//  * Disable the Login button while login action is being performed\n//  * Show an error message from the login() if login fails. The error should be cleared every time user re-attempts to log in.\n//  * Show an alert box (native Javascript alert) if login succeeds. Investigate the login function to find out how to log in successfully.\n\nexport default function LoginForm() {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [disabled, setDisabled] = useState(false);\n  const [error, setError] = useState(\"\");\n\n  useEffect(() => {\n    setDisabled(email.length === 0 || password.length < 6);\n  }, [email, password]);\n\n  const loginHandler = async () => {\n    setError(null);\n    try {\n      await login(email, password);\n      alert(\"Login successful!\");\n    } catch (e) {\n      setError(e);\n    }\n  };\n  return (\n    <div className=\"wrapper\">\n      <div className=\"row\">\n        <label htmlFor={\"email\"}>Email</label>\n        <input id={\"email\"} type={\"email\"}  onChange={ (e) => setEmail(e.currentTarget.value)}/>\n      </div>\n      <div className=\"row\">\n        <label htmlFor={\"password\"}>Password</label>\n        <input id={\"password\"} type={\"password\"}  onChange={ (e) => setPassword(e.currentTarget.value)}/>\n      </div>\n\n      {/* Place login error inside this div. Show the div ONLY if there are login errors. */\n      error &&\n      <div className=\"errorMessage\">{\n        {error}\n      }</div>\n      }\n\n      <div className=\"button\">\n        <button onClick={loginHandler} disabled={disabled}>Login</button>\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}